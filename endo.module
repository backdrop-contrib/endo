<?php
/**
 * @file
 * Endo - Enhanced Number Display Options.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function endo_field_formatter_info_alter(&$info) {
  $info['number_integer']['module'] = 'endo';
  $info['number_integer']['settings'] += array('zero_display' => '',
                                               'neg_paren' => '',
	                                      );
  $info['number_decimal']['module'] = 'endo';
  $info['number_decimal']['settings'] += array('trim_leading' => '',
	                                       'trim_trailing' => '',
	                                       'trim_decimal' => 'TRUE',
	                                       'min_scale' => 0,
                                               'zero_display' => '',
                                               'neg_paren' => '',
	                                      );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function endo_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'number_decimal') {
    $sample_p = _endo_render_decimal(4321.1234567890, $settings, $instance);
    $sample_n = _endo_render_decimal(-4321.1234567890, $settings, $instance);
    $sample_z = _endo_render_decimal(0, $settings, $instance);
    $summary[] = "$sample_p \u{3000}neg: $sample_n \u{3000}zero: $sample_z"; // "\u{3000}" is a wide space.
    $summary[] = t('Decimal places (max/min) = ') . $settings['scale'] . t(' / ') . $settings['min_scale'];
    if ($settings['trim_trailing']) $summary[] = t('Trailing zeros are suppressed');
    if ($settings['trim_leading']) $summary[] = t('Leading zero is suppressed');
    if ($settings['min_scale'] = 0) if ($settings['trim_decimal']) $summary[] = t('Trailing decimal is suppressed (integer format)');
  }
  if ($display['type'] == 'number_integer') {
    $sample_p = _endo_render_integer(4321.1234567890, $settings, $instance);
    $sample_n = _endo_render_integer(-4321.1234567890, $settings, $instance);
    $sample_z = _endo_render_integer(0, $settings, $instance);
    $summary[] = "$sample_p \u{3000}neg: $sample_n \u{3000}zero: $sample_z"; // "\u{3000}" is a wide space
  }
  return implode('<br />', $summary);
}
  
/**
 * The _endo_render_* functions are where the magic happens...
 *   Some code is duplicated in these two functions. This is purposeful, as it makes the whole
 *   thing more easy to understand, plus: separating out the duplicated code for the sake of
 *   elegance would complicate the thread of execution and convolution of function calls.
 *   Sometimes Brute Force prevails.
 */
function _endo_render_integer($input, $settings, $instance) { // $input is the discrete scalar value to render
  $output = number_format($input, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
  if ($settings['zero_display'] && $input == 0) {
    $output = $settings['zero_display'];	
  }
  elseif ($settings['neg_paren'] && $output < 0) {
    $output = ltrim($output, "-");
    $output = '(' . $output . ')';
  }
  if ($settings['prefix_suffix']) {
    $prefixes = isset($instance['settings']['prefix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['prefix'])) : array('');
    $suffixes = isset($instance['settings']['suffix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['suffix'])) : array('');
    $prefix = (count($prefixes) > 1) ? format_plural($item['value'], $prefixes[0], $prefixes[1]) : $prefixes[0];
    $suffix = (count($suffixes) > 1) ? format_plural($item['value'], $suffixes[0], $suffixes[1]) : $suffixes[0];
    $output = $prefix . $output . $suffix;
  }
  return $output;
}

function _endo_render_decimal($input, $settings, $instance) { // $input is the discrete scalar value to render
  $point = $settings['decimal_separator']; // placeholder for the decimal character, makes later expressions more concise.

  $output = number_format($input, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
  if ($settings['zero_display'] && $input == 0) {
    $output = $settings['zero_display'];	
  }
  else {
    if ($settings['trim_leading']) $output = ltrim($output, "0");
    if ($settings['trim_trailing']) {
      $output = rtrim($output, "0");
      while (strlen($output) - strrpos($output, $point) <= $settings['min_scale']) $output = $output . '0';
    }  
    if ($settings['trim_decimal']) $output = rtrim($output, $point);
    if ($settings['neg_paren'] && $output < 0) {
      $output = ltrim($output, "-");
      $output = '(' . $output . ')';
    }
  }	
  if ($settings['prefix_suffix']) {
    $prefixes = isset($instance['settings']['prefix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['prefix'])) : array('');
    $suffixes = isset($instance['settings']['suffix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['suffix'])) : array('');
    $prefix = (count($prefixes) > 1) ? format_plural($item['value'], $prefixes[0], $prefixes[1]) : $prefixes[0];
    $suffix = (count($suffixes) > 1) ? format_plural($item['value'], $suffixes[0], $suffixes[1]) : $suffixes[0];
    $output = $prefix . $output . $suffix;
  }
  return $output;
}

/**
 * Implements hook_field_formatter_view().
 */
function endo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'number_integer':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => _endo_render_integer($item['value'], $settings, $instance));
      }
      break;

    case 'number_decimal':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => _endo_render_decimal($item['value'], $settings, $instance));
      }
      break;

    case 'number_unformatted':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['value']);
      }
      break;      
  }
  return $element;
}
    
/**
 * Implements hook_field_formatter_settings_form().
 */
function endo_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  $element['prefix_suffix'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display prefix and suffix.'),
    '#default_value' => $settings['prefix_suffix'],
  );
  $element['neg_paren'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use parentheses for negative value; e.g: output "-32.21" as "(32.21)"'),
    '#default_value' => $settings['neg_paren'],
  );
  $element['zero_display'] = array(
    '#type' => 'textfield',
    '#title' => t('Text to display for Zero value.'),
    '#default_value' => $settings['zero_display'],
    '#description' => t('Enter text to override the output of zero.'),
  );

  if ($display['type'] == 'number_decimal' || $display['type'] == 'number_integer') {
    
    $sep_options = array(
      ''  => t('<none>'),
      '.' => t('Period'),
      ',' => t('Comma'),
      ' ' => t('Space'),
    );
    $element['thousand_separator'] = array(
      '#type' => 'select',
      '#title' => t('Thousand marker'),
      '#options' => $sep_options,
      '#default_value' => $settings['thousand_separator'],
    );

    if ($display['type'] == 'number_decimal') {
      $element['decimal_separator'] = array(
        '#type' => 'select',
        '#title' => t('Decimal marker'),
        '#options' => array('.' => t('Period'), ',' => t('Comma')),
        '#default_value' => $settings['decimal_separator'],
      );
	  $element['scale'] = array(
        '#type' => 'select',
        '#title' => t('Max. decimal places'),
        '#options' => backdrop_map_assoc(range(0, 10)),
        '#default_value' => $settings['scale'],
        '#description' => t('The maximum number of digits to the right of the decimal.'),
      );	
      $element['min_scale'] = array(
        '#type' => 'select',
        '#title' => t('Min. decimal places'),
        '#options' => backdrop_map_assoc(range(0, 10)),
        '#default_value' => $settings['min_scale'],
        '#description' => t('The minimum number of digits to the right of the decimal, even if they are zeros.'),
      );	
      $element['trim_trailing'] = array(
        '#type' => 'checkbox',
        '#title' => t('Suppress trailing zeros after decimal.'),
        '#default_value' => $settings['trim_trailing'],
        '#description' => t('Zeros will be trimmed off, only down to the Min. decimal places set above.'),
      );
      $element['trim_leading'] = array(
        '#type' => 'checkbox',
        '#title' => t('Suppress leading zero before decimal; e.g: output "0.12" as ".12"'),
        '#default_value' => $settings['trim_leading'],
      );
      $element['trim_decimal'] = array(
        '#type' => 'checkbox',
        '#title' => t('Suppress decimal point for integer value; e.g: output "23." as "23"'),
        '#default_value' => $settings['trim_decimal'],
        '#description' => t('This only takes effect if Min. decimal places (above) is set to zero.'),
      );	
    }
  }
  return $element;
}


/**** The following are here for future development of the module. For now, they don't really do anything. ****/

/**
 * Implements hook_config_info().
 */
function endo_config_info() {
  return array(
    'endo.settings' => array(
      'label' => t('Enhanced Number Display settings'),
      'group' => t('Configuration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function endo_menu() {
  return array(
    'admin/config/system/endo' => array(
      'title' => 'Enhanced Number Display',
      'description' => 'Configure Enhanced Number Display.',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('endo_configuration_form'),
      'access arguments' => array('administer Enhanced Number Display'),
      'file' => 'endo.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function endo_permission() {
  return array(
    'administer endo' => array(
      'title' => t('Administer Enhanced Number Display'),
    ),
  );
}

